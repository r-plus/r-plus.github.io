<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[seekpoint]]></title>
  <link href="http://r-plus.github.io/atom.xml" rel="self"/>
  <link href="http://r-plus.github.io/"/>
  <updated>2014-02-18T21:16:41+09:00</updated>
  <id>http://r-plus.github.io/</id>
  <author>
    <name><![CDATA[r_plus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of depends in debian package]]></title>
    <link href="http://r-plus.github.io/blog/2014/02/18/tip-of-depends-in-debian-package/"/>
    <updated>2014-02-18T20:38:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2014/02/18/tip-of-depends-in-debian-package</id>
    <content type="html"><![CDATA[<p>iPhoneとiPod touch向けにはiOS 4.2以上の全てをサポートして、iPadではiOS 4.2以上5.0未満をサポートする時(RestoreTabがこれ)のDependsの書き方。</p>

<pre><code>firmware (&gt;= 4.2), cy+model.iphone | cy+model.ipod | firmware (&lt;&lt; 5.0) 
</code></pre>

<ul>
<li><p>firmware (>= 4.2)  <br/>
これは至極一般的ですね。全てのデバイスに対してiOS 4.2以上を要求します。</p></li>
<li><p>cy+model.iphone | cy+model.ipod | firmware (&lt;&lt; 5.0)  <br/>
<code>|</code>のOR演算子でつないでいます。<code>cy+model</code>はiphone, ipod, ipadそれぞれが存在します。ORは先頭から評価されていくため以下のようになります。</p>

<ul>
<li>iPhoneであればTRUE</li>
<li>iPhoneではないが、iPodであればTRUE</li>
<li>iPhoneでもなく、iPodでもないが(== iPad)、iOS 5.0未満であればTRUE</li>
<li>iPadでiOS 5以上だとFALSE</li>
</ul>
</li>
</ul>


<h4>参考</h4>

<p>iOS 7からRocketBootstrapが必要になったAppListの場合</p>

<pre><code>com.rpetrich.rocketbootstrap (&gt;= 1.0) | firmware (&lt;&lt; 7.0)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sleipnizer v4.1 overview]]></title>
    <link href="http://r-plus.github.io/blog/2014/01/26/sleipnizer-4-dot-1/"/>
    <updated>2014-01-26T12:17:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2014/01/26/sleipnizer-4-dot-1</id>
    <content type="html"><![CDATA[<p>全Changelogは<a href="http://tweak-description.appspot.com/cydia/sleipnizer.html">こちら</a>を見ていただくとして、4.1の目玉について。</p>

<ul>
<li><p>Multiple Javascript action definition.  <br/>
かなり前から要望はいただいていた機能で、JavaScriptの実行アクションをユーザが自由に追加できます。増やした分は「Run JavaScript n」の形で表現されます。</p></li>
<li><p>onLoad Javascript execution.  <br/>
ページのロード完了時に指定したJavaScriptを実行します。前段の機能で複数指定が可能になった為、こちらも複数のJSを指定できます。私はAutoPagerizeのJSを設定してます。</p></li>
<li><p>Flipswitch can invoke alternate-action-url.  <br/>
特有というわけではないが、Flipswitchのalternate-action-urlにSleipnizerの設定を開くPATHを追加しました。CCTogglesのトグルを長押しすると起動できます。地味に便利。</p></li>
<li><p>Gesture系の設定をまとめて1階層下へ  <br/>
&ldquo;L&rdquo;, &ldquo;U&#8221;そしてGlitchy GestureとSensitivityをまとめて1階層下へ移動。</p></li>
</ul>


<p>その他、バグ修正等。たぶんこの実装を行った事で「Run JavaScript n」じゃなくて名前にしてくれと要望がでると思いますが、いまのところはペンディングで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AllAroundPullViewの後継、AAPullToRefreshを作成しました]]></title>
    <link href="http://r-plus.github.io/blog/2013/12/11/aapulltorefreshwozuo-cheng-simasita/"/>
    <updated>2013-12-11T23:08:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/12/11/aapulltorefreshwozuo-cheng-simasita</id>
    <content type="html"><![CDATA[<p>1年ほど前にSleipnizerにPullToによるアクションを搭載するために<code>AllAroundPullView</code>を開発し組み込んだ上でOSSで公開していました。</p>

<p>その後iOS 6でApple実装によるUIRefreshControlが提供され、iOS 7で見た目が大幅に変わったためiOS 7向けのSleipnizerにおいてもなんか変えられたらなーと思っていたところに見た目素晴らしいライブラリが公開されました。</p>

<p>それがこちら <a href="https://github.com/uzysjung/UzysCircularProgressPullToRefresh">UzysCircularProgressPullToRefresh</a></p>

<p><img src="https://raw.github.com/uzysjung/UzysCircularProgressPullToRefresh/master/UzysCircularProgressPulltoRefresh2.gif" alt="" /></p>

<p>Pinterest風でなかなか良いぞと思ったので、forkして以下のあたりの変更を施して出来上がったのが<code>AAPullToRefresh</code>です！</p>

<ul>
<li>見つけたバグっぽいのつぶし</li>
<li>4方向同時に追加可能なように修正</li>
<li>トリガー状態で裏Viewを発光させる</li>
<li>Sleipnizer向けにthresholdプロパティの追加</li>
</ul>


<p><a href="https://github.com/r-plus/AAPullToRefresh">AAPullToRefresh</a></p>

<p><img src="http://f.cl.ly/items/1H1r3g3g20241k3f0Y3z/demo3.gif" alt="" /></p>

<p>パッと見の見た目変化に加えて、指を離してからビューのスクロールが止まるまでとそこからインジケーターがしぼんで消えつつ通常位置までビューが戻るあたりの滑らかなアニメーションがAllAroundPullViewに比べて気持ち良いものになってます。</p>

<p>多分iOS 7向けのSleipnizerに搭載されますのでご期待あれ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File extension for theos logo.]]></title>
    <link href="http://r-plus.github.io/blog/2013/12/07/file-extension-for-theos/"/>
    <updated>2013-12-07T10:08:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/12/07/file-extension-for-theos</id>
    <content type="html"><![CDATA[<p>theosのLogo用拡張子は種類がいくつかあるのでその話。</p>

<h3>theosって？</h3>

<p>theosはiOS/Mac向けのMakefileフレームワークだ。Makefileからincludeしてあげれば苦行のようなMakefileの記述からある程度解放してくれる。</p>

<h3>Logo</h3>

<p>どちらかと言えばtheosはビルド過程にこの処理を含ませるためのMakefileという側面が強いが、MobileSubstrate向けのswizzleコードの記述を楽に書けるよう変換も行わせる事ができる。
その際の拡張子が以下だ。</p>

<ul>
<li>.x</li>
<li>.xm</li>
<li>.xi</li>
<li>.xmi</li>
</ul>


<p>この拡張子の違いについて説明しよう。まず一番一般的な<code>.xm</code>だが、これはLogo変換処理を行い<code>.mm</code>ファイルを生成し、Objective-C++としてプリプロセス、コンパイル、リンクを行う。
次に<code>.x</code>はそれのObjective-C版だ。全てに言える事だがLogoの変換処理に違いはない。オリジナルのマクロによってObjc/Objc++で普通にswizzleを書くのと同じ状態へ持っていくのだから至極当然の処理順だ。</p>

<p>最後にそれらに<code>i</code>がついたものだ、これは真っ先にobjc/objc++プリプロセスが行われる。その後にLogo処理、コンパイル、リンクとなる。そこそこコードを書いていると以下のように書きたいと思うこともあるだろう。</p>

<pre><code>#define SHARED_INSTANCE [%c(SBProcess) sharedInstance]
</code></pre>

<p><code>%c</code>マクロはLogo処理向けであるのでプリプロセスに放り込むとエラーになる。このレベルであれば<code>objc_getClass</code>で代用がきくが以下のようなケースはそうもいかない。</p>

<pre><code>%hook UIKBKey 
- (NSString *)displayString {
    NSString *result = %orig();
    return [self.name rangeOfString:@"-Small-"].location != NSNotFound ? [result lowercaseString] : result;
}
%end

%hook UIKBTree
- (NSString *)displayString {
    NSString *result = %orig();
    return [self.name rangeOfString:@"-Small-"].location != NSNotFound ? [result lowercaseString] : result;
%end
</code></pre>

<p>処理内容が同じなので変更は一度ですむようにすべきだが、関数にまとめても<code>%orig</code>は<code>%hook</code>の外では使用できない。
プリプロセスが先に走る<code>.xi</code>, <code>.xmi</code>ではdefineにLogoを書いておく事が可能になるのでdefineでまとめられる。</p>

<pre><code>#define HONOR_CASE \
    NSString *result = %orig(); \
    return [self.name rangeOfString:@"-Small-"].location != NSNotFound ? [result lowercaseString] : result;

%hook UIKBKey
- (NSString *)displayString { HONOR_CASE }
%end

%hook UIKBTree
- (NSString *)displayString { HONOR_CASE }
%end
</code></pre>

<p>めでたく修正時には一度の変更ですむようにできた。  <br/>
コード出典: <a href="https://github.com/ashikase/ShowCase/blob/master/Tweak.xmi#L109">ShowCase &ndash; github/ashikase</a></p>

<h3>まとめ</h3>

<table>
<thead>
<tr>
<th></th>
<th> extension </th>
<th> process order</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> .x        </td>
<td> Logo &ndash;> objc preprocess+compile &ndash;> link</td>
</tr>
<tr>
<td></td>
<td> .xm       </td>
<td> Logo &ndash;> objc++ preprocess+compile &ndash;> link</td>
</tr>
<tr>
<td></td>
<td> .xi       </td>
<td> objc preprocess &ndash;> Logo &ndash;> objc compile &ndash;> link</td>
</tr>
<tr>
<td></td>
<td> .xmi      </td>
<td> objc++ preprocess &ndash;> Logo &ndash;> objc++ compile &ndash;> link</td>
</tr>
</tbody>
</table>


<p>なおこの表は<a href="http://www.iphonedevwiki.net/index.php/Logos#Extension_for_Logos">iphonedevwiki</a>にも記述しておいた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis for THEOS]]></title>
    <link href="http://r-plus.github.io/blog/2013/10/19/travis-for-theos/"/>
    <updated>2013-10-19T11:25:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/10/19/travis-for-theos</id>
    <content type="html"><![CDATA[<p>普通にXcodeのプロジェクトに対してTravis CIでCIしているケースはよく見ますが、theos向けのものは見たことがないのでやってみました。</p>

<h3>サンプルプロジェクト</h3>

<p><a href="https://github.com/r-plus/SwipeShiftCaret">SwipeShiftCaret</a> を使いました。</p>

<p>TravisのMac VMは<code>homebrew</code>が使えますので<code>dpkg</code>をインストールし、theosを配備してやればビルド環境として整います。
タイミングはapt-get等で環境をととのえるフェーズとして<code>before_install</code>があるため、そこで配備します。git submodule等があればそちらのコードもこのフェーズで取得すると良いでしょう(git cloneではサブモジュールまで取得されません)。</p>

<p>theosの配備についてはセットアップ及びライブラリ・ヘッダー更新用のスクリプトをTravis対応用にカレントディレクトリに展開するよう修正したものを使いました。</p>

<pre><code>before_install:
  - brew update
  - brew install dpkg
  - curl https://raw.github.com/r-plus/dotfiles/master/install_theos.sh | bash
</code></pre>

<p>そして本命のビルドはmakeを流せば良いため</p>

<pre><code>script:
  - make
</code></pre>

<p>これでTravis上でビルド可能です。TravisとのServiceHookを有効にしたリポジトリで、これらを記述した<code>.travis.yml</code>をプッシュすれば以後はプッシュ毎、PullReq毎にCIが走ってくれます。</p>

<p>リターンコードが0であればSuccessになり、晴れて <a href="https://travis-ci.org/r-plus/SwipeShiftCaret.png?branch=master">https://travis-ci.org/r-plus/SwipeShiftCaret.png?branch=master</a> のアイコン <img src="https://travis-ci.org/r-plus/SwipeShiftCaret.png?branch=master" alt="" /> がPassingになります、READMEにでも貼っておきましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iproute2 instead of net-tools]]></title>
    <link href="http://r-plus.github.io/blog/2013/08/20/iproute2-instead-of-net-tools/"/>
    <updated>2013-08-20T23:00:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/08/20/iproute2-instead-of-net-tools</id>
    <content type="html"><![CDATA[<p>メンテナンスされておらず、最早未来のないnet-toolsの代替であるiproute2での静的ルーティングの設定。</p>

<p>■追加</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>route add -net 192.168.33.128/25 gw 192.168.10.1 eth0
</span><span class='line'>ip route add 192.168.33.128/25 via 192.168.10.1
</span></code></pre></td></tr></table></div></figure>


<p>■削除</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>route del -net 192.168.33.128/25 gw 192.168.10.1 eth0
</span><span class='line'>ip route del 192.168.33.128
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeStamp]]></title>
    <link href="http://r-plus.github.io/blog/2013/07/28/timestamp/"/>
    <updated>2013-07-28T00:02:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/07/28/timestamp</id>
    <content type="html"><![CDATA[<p>最近終業時間をメモるためにカレンダーにその時間を登録しているので、そのショートカットとしてActivator用のtweakを作りました。</p>

<p>TimeStamp <a href="https://github.com/r-plus/TimeStamp">https://github.com/r-plus/TimeStamp</a>   <br/>
debも置いてあります。</p>

<p>最近のgithubはrepo作成時にライセンス選ぶとライセンス本文ファイルとREADME.mdを生成してくれるんですね。ちなみにPublicDomainにしてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[引越し]]></title>
    <link href="http://r-plus.github.io/blog/2013/07/26/yin-yue-si/"/>
    <updated>2013-07-26T00:59:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/07/26/yin-yue-si</id>
    <content type="html"><![CDATA[<ul>
<li>markdownで書ける</li>
<li>はてなブログだと広告出る</li>
<li>Tumblrはmarkdownで書けるけどメールで送るってのがナンセンス</li>
<li>Vimで書ける</li>
</ul>


<p>あたりの理由でBloggerから引越しました。めんどいので以前の記事はBloggerの方に放置で。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://r-plus.github.io/blog/2013/07/25/test/"/>
    <updated>2013-07-25T20:22:00+09:00</updated>
    <id>http://r-plus.github.io/blog/2013/07/25/test</id>
    <content type="html"><![CDATA[<p>code test. <code>code</code></p>

<pre><code>pre
tag
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alloc
</span><span class='line'>init</span></code></pre></td></tr></table></div></figure>


<h1>h1</h1>

<h2>h2</h2>

<h3>h3</h3>

<h4>h4</h4>

<h4>h5</h4>

<ul>
<li>list</li>
</ul>

]]></content>
  </entry>
  
</feed>
